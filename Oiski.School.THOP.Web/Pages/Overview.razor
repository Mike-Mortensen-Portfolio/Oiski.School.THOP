@page "/"
@page "/Overview"
@using Oiski.School.THOP.Services.Models;
@using Oiski.School.THOP.Web.Services;
@using System.Globalization;
@using System.Diagnostics;
@inject HumidexServiceScope humidexService;
@inject PeripheralServiceScope peripheralService;
@inject ILogger<Overview> logger;
@inject IHttpClientFactory factory;

<PageTitle>Overview</PageTitle>

<div class="mt-5 container">
    <div class="row text-tertiary">
        <div class="col-2"><!--Filler--></div>
        <div class="col-8 shadow bg-gray-600">
            <div class="mt-3 row text-cyan">
                <h3 class="text-center">Latest Readings (@_locationId)</h3>
            </div>
            <p class="m-0 text-center">@_latestReading.Time?.ToLocalTime().ToString(CultureInfo.InvariantCulture) (Local)</p>
            <div class="p-5 pt-2 row text-center fw-bold">
                <div class="p-5 col-5 border border-secondary rounded">
                    <h1 class="m-0">@_latestReading.Temperature.ToString("F1", CultureInfo.InvariantCulture)°C</h1>
                </div>
                <div class="col-2"><!--Filler--></div>
                <div class="p-5 col-5 border border-secondary rounded">
                    <h1 class="m-0">@_latestReading.Humidity.ToString("F1", CultureInfo.InvariantCulture)% RH</h1>
                </div>
            </div>
        </div>
        <div class="col-2"><!--Filler--></div>
    </div>
</div>


<div class="mt-5 container">
    <div class="row text-tertiary">
        <div class="col-2"><!--Filler--></div>
        <div class="col-8 shadow bg-gray-600">
            <div class="mt-2 row text-cyan">
                <h3 class="text-center">Peripherals (@_locationId)</h3>
            </div>
            <div class="ps-5 pe-5 row text-center">
                <div class="p-3 col-5">
                    <p class="m-0">Ventilation:</p>
                </div>
                <div class="col-2"><!--Filler--></div>
                <div class="p-3 col-5">
                    <Radzen.Blazor.RadzenSwitch ValueChanged="@(async (state) => await peripheralService.OpenVentsAsync (_locationId, _deviceId, state))" />
                </div>
            </div>
            <div class="ps-5 pe-5 row text-center">
                <div class="p-3 col-5">
                    <p class="m-0">Lights:</p>
                </div>
                <div class="col-2"><!--Filler--></div>
                <div class="p-3 col-5">
                    <Radzen.Blazor.RadzenSwitch ValueChanged="@(async (state) => await peripheralService.LightsOnAsync (_locationId, _deviceId, state))" />
                </div>
            </div>
        </div>
        <div class="col-2"><!--Filler--></div>
    </div>
</div>

<div class="mt-5 container">
    <div class="row text-tertiary">
        <div class="col-2"><!--Filler--></div>
        <div class="col-8 shadow bg-gray-600">
            <div class="mt-2 row text-cyan">
                <h3 class="text-center">Current Device</h3>
            </div>
            <div class="ps-5 pe-5 row">
                <p class="col-5 text-center">LocationId</p>
                <p class="col-2 text-center">/</p>
                <p class="col-5 text-center">DeviceId</p>
            </div>
            <div class="ps-5 pe-5 pt-2 row text-center fw-bold">
                <div class="p-2 pb-4 col-5">
                    <InputText class="textfield w-100 text-center" Value="@_locationId" ValueChanged="@(async (value) => {_locationId = value; _latestReading = await GetLatestReadingAsync() ?? new HumidexDto();})" ValueExpression="@(() => _locationId)" />
                </div>
                <div class="col-2"><!--Filler--></div>
                <div class="p-2 pb-4 col-5">
                    <InputText class="textfield w-100 text-center" @bind-Value="_deviceId" />
                </div>
            </div>
        </div>
        <div class="col-2"><!--Filler--></div>
    </div>
</div>


@code {
    private HumidexDto _latestReading = new HumidexDto();
    private string _locationId = "home";
    private string _deviceId = "oiski_1010";

    protected override async Task OnInitializedAsync()
    {

        var client = factory.CreateClient();
        client.BaseAddress = new Uri("https://school-tenant.eu.auth0.com/");

        var response = await client.PostAsJsonAsync("oauth/token", new
        {
            client_id = "6wAXu6uhwqCO7SMiFfdfGpzLmpWKi8ZW",
            client_secret = "QBg3fUGI2Gt6ViC6uRI_SsFFGreDr0zhjkd78-s0W-c2BPFpWs1lkjaIiWz1nwLY",
            audience = "https://Thop/data",
            grant_type = "client_credentials"
        });

        if (response.IsSuccessStatusCode)
        {
            var contentAsString = await response.Content.ReadAsStringAsync();
        }

        _latestReading = await GetLatestReadingAsync() ?? new HumidexDto();

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            using var timer = new PeriodicTimer(TimeSpan.FromMinutes(2));
            while (await timer.WaitForNextTickAsync())
            {
                _latestReading = await GetLatestReadingAsync() ?? new HumidexDto();
                StateHasChanged();
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task<HumidexDto?> GetLatestReadingAsync()
    {
        logger.LogInformation("Fetching latest reading");
        return (await humidexService.GetAllAsync(new HumidexOptions
            {
                LocationId = _locationId,
                MaxCount = 1
            })).FirstOrDefault();
    }
}
