@page "/"
@page "/Overview"
@attribute [Authorize]
@using Oiski.School.THOP.Services.Models;
@using Oiski.School.THOP.Web.Services;
@using System.Globalization;
@using System.Diagnostics;
@inject HumidexServiceScope humidexService;
@inject PeripheralServiceScope peripheralService;
@inject ILogger<Overview> logger;
@inject IHttpClientFactory factory;
@inject GlobalState stateDetails;

<PageTitle>Overview</PageTitle>

<div class="mt-5 container">
    <div class="row text-tertiary">
        <div class="col-2"><!--Filler--></div>
        <div class="col-8 shadow bg-gray-600">
            <div class="mt-3 row text-cyan">
                <h3 class="text-center">Latest Readings (@stateDetails.Device.LocationId)</h3>
            </div>
            <p class="m-0 text-center">@_latestReading.Time?.ToLocalTime().ToString(CultureInfo.InvariantCulture) (Local)</p>
            <div class="p-5 pt-2 row text-center fw-bold">
                <div class="p-5 col-5 border border-secondary rounded">
                    <h1 class="m-0">@_latestReading.Temperature.ToString("F1", CultureInfo.InvariantCulture)°C</h1>
                </div>
                <div class="col-2"><!--Filler--></div>
                <div class="p-5 col-5 border border-secondary rounded">
                    <h1 class="m-0">@_latestReading.Humidity.ToString("F1", CultureInfo.InvariantCulture)% RH</h1>
                </div>
            </div>
        </div>
        <div class="col-2"><!--Filler--></div>
    </div>
</div>


<div class="mt-5 container">
    <div class="row text-tertiary">
        <div class="col-2"><!--Filler--></div>
        <div class="col-8 shadow bg-gray-600">
            <div class="mt-2 row text-cyan">
                <h3 class="text-center">Peripherals (@stateDetails.Device.LocationId)</h3>
            </div>
            <div class="ps-5 pe-5 row text-center">
                <div class="p-3 col-5">
                    <p class="m-0">Ventilation:</p>
                </div>
                <div class="col-2"><!--Filler--></div>
                <div class="p-3 col-5">
                    <Radzen.Blazor.RadzenSwitch ValueChanged="@(async (state) => await peripheralService.OpenVentsAsync (stateDetails.Device.LocationId!, stateDetails.Device.DeviceId!, state))" />
                </div>
            </div>
            <div class="ps-5 pe-5 row text-center">
                <div class="p-3 col-5">
                    <p class="m-0">Lights:</p>
                </div>
                <div class="col-2"><!--Filler--></div>
                <div class="p-3 col-5">
                    <Radzen.Blazor.RadzenSwitch ValueChanged="@(async (state) => await peripheralService.LightsOnAsync (stateDetails.Device.LocationId!, stateDetails.Device.DeviceId!, state))" />
                </div>
            </div>
        </div>
        <div class="col-2"><!--Filler--></div>
    </div>
</div>

<div class="mt-5 container">
    <div class="row text-tertiary">
        <div class="col-2"><!--Filler--></div>
        <div class="col-8 shadow bg-gray-600">
            <div class="mt-2 row text-cyan">
                <h3 class="text-center">Current Device</h3>
            </div>
            <div class="ps-5 pe-5 row">
                <p class="col-5 text-center">LocationId</p>
                <p class="col-2 text-center">/</p>
                <p class="col-5 text-center">DeviceId</p>
            </div>
            <div class="ps-5 pe-5 pt-2 row text-center fw-bold">
                <div class="p-2 pb-4 col-5">
                    <InputText class="textfield w-100 text-center" Value="@stateDetails.Device.LocationId" ValueChanged="@(async (value) => {stateDetails.Device = new DeviceDetails() {DeviceId = stateDetails.Device.DeviceId, LocationId = value}; _latestReading = await GetLatestReadingAsync() ?? new HumidexDto();})" ValueExpression="@(() => stateDetails.Device.LocationId)" />
                </div>
                <div class="col-2"><!--Filler--></div>
                <div class="p-2 pb-4 col-5">
                    <InputText class="textfield w-100 text-center" Value="@stateDetails.Device.DeviceId" ValueChanged="@(async (value) => {stateDetails.Device = new DeviceDetails() {DeviceId = value, LocationId = stateDetails.Device.LocationId}; _latestReading = await GetLatestReadingAsync() ?? new HumidexDto();})" ValueExpression="@(() => stateDetails.Device.DeviceId)" />
                </div>
            </div>
        </div>
        <div class="col-2"><!--Filler--></div>
    </div>
</div>


@code {
    private HumidexDto _latestReading = new HumidexDto();

    protected override async Task OnInitializedAsync()
    {
        _latestReading = await GetLatestReadingAsync() ?? new HumidexDto();

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            using var timer = new PeriodicTimer(TimeSpan.FromMinutes(2));
            while (await timer.WaitForNextTickAsync())
            {
                _latestReading = await GetLatestReadingAsync() ?? new HumidexDto();
                StateHasChanged();
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task<HumidexDto?> GetLatestReadingAsync()
    {
        logger.LogInformation("Fetching latest reading");
        return (await humidexService.GetAllAsync(new HumidexOptions
            {
                LocationId = stateDetails.Device.LocationId,
                MaxCount = 1
            })).FirstOrDefault();
    }
}
