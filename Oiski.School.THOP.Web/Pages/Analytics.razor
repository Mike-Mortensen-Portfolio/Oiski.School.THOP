@page "/Analytics"
@using Oiski.School.THOP.Services.Models;
@using Oiski.School.THOP.Web.Services;
@using Radzen.Blazor
@using System.Globalization;
@using Oiski.School.THOP.Services;
@inject HumidexServiceScope service;

<PageTitle>Analytics</PageTitle>

<div class="container">
    <div class="mt-2 row">
        <h2 class="text-center">Humidex (home)</h2>
    </div>
    <div class="row overflow-hidden">
        <div class="col-12 shadow bg-gray-500 p-3" Style="height:500px;">
            <RadzenCard class="w-100 mb-4 bg-secondary" Style="display: flex; align-items: center; gap: 0.5rem">
                <RadzenCheckBox @bind-Value="@showDataLabels" Name="dataLabels"></RadzenCheckBox>
                <RadzenLabel Text="Show Data Labels" For="dataLabels" />
            </RadzenCard>
            <RadzenChart>
                <RadzenLegend Position="LegendPosition.Top" />
                <RadzenLineSeries Smooth="@smooth" Data="@readings" CategoryProperty="Time" Title="Humidity" LineType="LineType.Dashed" ValueProperty="Humidity">
                    <RadzenMarkers MarkerType="MarkerType.Circle" />
                    <RadzenSeriesDataLabels Visible="@showDataLabels" />
                </RadzenLineSeries>
                <RadzenLineSeries Smooth="@smooth" Data="@readings" CategoryProperty="Time" Title="Temperature" ValueProperty="Temperature">
                    <RadzenMarkers MarkerType="MarkerType.Circle" />
                    <RadzenSeriesDataLabels Visible="@showDataLabels" />
                </RadzenLineSeries>
                <RadzenCategoryAxis Stroke="rgba(41, 31, 30, 1)" Padding="20" Formatter="@FormatAsEUTime">
                    <RadzenTicks>
                        <Template>
                            <text class="rz-tick-text" style="text-anchor: start; transform: translate(@(Math.Truncate(context.X))px, @(Math.Truncate(context.Y + 10))px) rotate(45deg)">@context.Value</text>
                        </Template>
                    </RadzenTicks>
                </RadzenCategoryAxis>
                <RadzenValueAxis Stroke="rgba(41, 31, 30, 1)">
                    <RadzenGridLines Stroke="rgba(41, 31, 30, 1)" Visible="true" />
                    <RadzenAxisTitle Text="Value" />
                </RadzenValueAxis>
            </RadzenChart>
        </div>
    </div>
    <div class="mt-4 row">
        <h2 class="text-center">Quick Actions</h2>
    </div>
    <div class="row">
        <div class="col-1"><!--Filler--></div>
        <div class="col-10 text-center">
            <button style="width:250px; height:50px; font-size:20px;" class="me-3 btn btn-secondary border-flat" @onclick="@(async () => await PerformQuickAction (QuickAction.Minutes60))">Last 60 min.</button>
            <button style="width:250px; height:50px; font-size:20px;" class="me-3 btn btn-secondary border-flat" @onclick="@(async () => await PerformQuickAction (QuickAction.Hours24))">Last 24 hours</button>
            <button style="width:250px; height:50px; font-size:20px;" class="btn btn-secondary border-flat" @onclick="@(async () => await PerformQuickAction (QuickAction.Days7))">Last 7 days</button>
        </div>
        <div class="col-1"><!--Filler--></div>
    </div>
</div>

@code {
    bool smooth = false;
    bool showDataLabels = false;

    DateTime startDate;
    DateTime endDate;
    TimeSpan startTime;
    TimeSpan endTime;


    string FormatAsEUTime(object value)
    {
        return ((DateTime)value).ToLocalTime().ToString("dd/MM/yyyy HH:mm:ss", CultureInfo.InvariantCulture);
    }

    List<HumidexDto> readings = new List<HumidexDto>();

    protected override async Task OnInitializedAsync()
    {
        await PerformQuickAction(QuickAction.Hours24);

        await base.OnInitializedAsync();
    }

    async Task PerformQuickAction(QuickAction action)
    {
        var date = DateTime.Now;

        if (action != QuickAction.None)
        {
            endDate = date.Date;
            endTime = date.TimeOfDay;
        }

        switch (action)
        {
            case QuickAction.Minutes60:
                date = date.AddMinutes(-60);
                startDate = date.Date;
                startTime = date.TimeOfDay;
                break;
            case QuickAction.Hours24:
                date = date.AddHours(-24);
                startDate = date.Date;
                startTime = date.TimeOfDay;
                break;
            case QuickAction.Days7:
                date = date.AddDays(-7);
                startDate = date.Date;
                startTime = date.TimeOfDay;
                break;
        }

        await PullHumidex();
    }

    async Task PullHumidex()
    {
        readings = await service.GetAllAsync(new HumidexOptions
            {
                StartTime = startDate.Add(startTime),
                EndTime = endDate.Add(endTime)
            });
    }
}
