@page "/Analytics"
@attribute [Authorize]
@using Oiski.School.THOP.Services.Models;
@using Oiski.School.THOP.Web.Services;
@using Radzen.Blazor
@using System.Globalization;
@using Oiski.School.THOP.Services;
@inject HumidexServiceScope service;
@inject ILogger<Analytics> logger;
@inject GlobalState stateDetails;

<PageTitle>Analytics</PageTitle>

<div class="container">
    <div class="mt-2 row">
        <h2 class="text-center">Humidex (@stateDetails.Device.LocationId)</h2>
    </div>
    <div class="row shadow">
        <div class="col-12 shadow bg-gray-500 p-3" Style="height:500px;">
            <RadzenCard class="w-100 mb-4 bg-secondary" Style="display: flex; align-items: center; gap: 0.5rem">
                <RadzenCheckBox @bind-Value="@_showDataLabels" Name="dataLabels"></RadzenCheckBox>
                <RadzenLabel Text="Show Data Labels" For="dataLabels" />
            </RadzenCard>
            <div class="ps-5 pe-5">
                <RadzenChart>
                    <RadzenLegend Position="LegendPosition.Top" />
                    <RadzenLineSeries Smooth="@_smooth" Data="@readings" CategoryProperty="Time" Title="Humidity" LineType="LineType.Dashed" ValueProperty="Humidity">
                        <RadzenMarkers MarkerType="MarkerType.Circle" />
                        <RadzenSeriesDataLabels Visible="@_showDataLabels" />
                    </RadzenLineSeries>
                    <RadzenLineSeries Smooth="@_smooth" Data="@readings" CategoryProperty="Time" Title="Temperature" ValueProperty="Temperature">
                        <RadzenMarkers MarkerType="MarkerType.Circle" />
                        <RadzenSeriesDataLabels Visible="@_showDataLabels" />
                    </RadzenLineSeries>
                    <RadzenCategoryAxis Stroke="rgba(41, 31, 30, 1)" Padding="20" Formatter="@FormatAsEUTime">
                        <RadzenTicks>
                            <Template>
                                <text class="rz-tick-text" style="text-anchor: start; transform: translate(@(Math.Truncate(context.X))px, @(Math.Truncate(context.Y + 10))px) rotate(45deg)">@context.Value</text>
                            </Template>
                        </RadzenTicks>
                    </RadzenCategoryAxis>
                    <RadzenValueAxis Stroke="rgba(41, 31, 30, 1)">
                        <RadzenGridLines Stroke="rgba(41, 31, 30, 1)" Visible="true" />
                        <RadzenAxisTitle Text="Value" />
                    </RadzenValueAxis>
                </RadzenChart>
            </div>
        </div>
    </div>
    <div class="mt-4 row">
        <h2 class="text-center">Quick Actions</h2>
    </div>
    <div class="row">
        <div class="col-1"><!--Filler--></div>
        <div class="col-10 text-center">
            @if (_isBusy)
            {
                <label style="width:250px; height:50px; font-size:20px;" class="me-3 btn bg-gray-600 border-flat">Last 60 min.</label>
                <label style="width:250px; height:50px; font-size:20px;" class="me-3 btn bg-gray-600 border-flat">Last 24 hours</label>
                <label style="width:250px; height:50px; font-size:20px;" class="btn bg-gray-600 border-flat">Last 7 days</label>
            }
            else
            {
                switch (_currentAction)
                {
                    case QuickAction.Minutes60:
                        <label style="width:250px; height:50px; font-size:20px;" class="me-3 btn bg-gray-600 border-flat">Last 60 min.</label>
                        <button style="width:250px; height:50px; font-size:20px;" class="me-3 btn btn-secondary border-flat" @onclick="@(async () => await PerformQuickAction (QuickAction.Hours24))">Last 24 hours</button>
                        <button style="width:250px; height:50px; font-size:20px;" class="btn btn-secondary border-flat" @onclick="@(async () => await PerformQuickAction (QuickAction.Days7))">Last 7 days</button>
                        break;
                    case QuickAction.Hours24:
                        <button style="width:250px; height:50px; font-size:20px;" class="me-3 btn btn-secondary border-flat" @onclick="@(async () => await PerformQuickAction (QuickAction.Minutes60))">Last 60 min.</button>
                        <label style="width:250px; height:50px; font-size:20px;" class="me-3 btn bg-gray-600 border-flat">Last 24 hours</label>
                        <button style="width:250px; height:50px; font-size:20px;" class="btn btn-secondary border-flat" @onclick="@(async () => await PerformQuickAction (QuickAction.Days7))">Last 7 days</button>
                        break;
                    case QuickAction.Days7:
                        <button style="width:250px; height:50px; font-size:20px;" class="me-3 btn btn-secondary border-flat" @onclick="@(async () => await PerformQuickAction (QuickAction.Minutes60))">Last 60 min.</button>
                        <button style="width:250px; height:50px; font-size:20px;" class="me-3 btn btn-secondary border-flat" @onclick="@(async () => await PerformQuickAction (QuickAction.Hours24))">Last 24 hours</button>
                        <label style="width:250px; height:50px; font-size:20px;" class="btn bg-gray-600 border-flat">Last 7 days</label>
                        break;
                }
            }
        </div>
        <div class="col-1"><!--Filler--></div>
    </div>
</div>

@code {
    QuickAction _currentAction = QuickAction.Hours24;
    bool _smooth = false;
    bool _showDataLabels = false;
    bool _isBusy = false;

    DateTime _startDate;
    DateTime _endDate;
    TimeSpan _startTime;
    TimeSpan _endTime;


    string FormatAsEUTime(object value)
    {
        return ((DateTime)value).ToLocalTime().ToString("dd/MM/yyyy HH:mm:ss", CultureInfo.InvariantCulture);
    }

    List<HumidexDto> readings = new List<HumidexDto>();

    protected override async Task OnInitializedAsync()
    {
        await PerformQuickAction(_currentAction);

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            using var timer = new PeriodicTimer(TimeSpan.FromMinutes(2));
            while (await timer.WaitForNextTickAsync())
            {
                await PerformQuickAction(_currentAction);
                StateHasChanged();
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    async Task PerformQuickAction(QuickAction action)
    {
        _isBusy = true;
        var date = DateTime.Now;

        _currentAction = action;

        if (action != QuickAction.None)
        {
            _endDate = date.Date;
            _endTime = date.TimeOfDay;
        }

        switch (action)
        {
            case QuickAction.Minutes60:
                date = date.AddMinutes(-60);
                _startDate = date.Date;
                _startTime = date.TimeOfDay;
                break;
            case QuickAction.Hours24:
                date = date.AddHours(-24);
                _startDate = date.Date;
                _startTime = date.TimeOfDay;
                break;
            case QuickAction.Days7:
                date = date.AddDays(-7);
                _startDate = date.Date;
                _startTime = date.TimeOfDay;
                break;
        }

        await PullHumidex();

        _isBusy = false;
    }

    async Task PullHumidex()
    {
        logger.LogInformation("Fetching graph data");
        readings = await service.GetAllAsync(new HumidexOptions
            {
                StartTime = _startDate.Add(_startTime),
                EndTime = _endDate.Add(_endTime),
                LocationId = stateDetails.Device.LocationId
            });
    }
}
